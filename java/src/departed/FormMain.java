/*
 * Copyright (C) 2024 koalium
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package departed;

import com.fazecast.jSerialComm.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.nio.ByteBuffer;
import static java.time.Clock.system;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import java.lang.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;

/**
 *
 * @author koalium
 */
public class FormMain extends javax.swing.JFrame {

	/**
	 * Creates new form form
	 */
	public FormMain() {

		log = new Log();
		comtosend= new Vector();
		initComponents();
		initAddPorts();
		bybu = ByteBuffer.allocate(225000);
		
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jPanel1 = new javax.swing.JPanel();
                jLabelStatus = new javax.swing.JLabel();
                jLabelWrite = new javax.swing.JLabel();
                jPanel2 = new javax.swing.JPanel();
                jComboBoxGasType = new javax.swing.JComboBox<>();
                jComboBoxFAType = new javax.swing.JComboBox<>();
                jComboBoxExplodeType = new javax.swing.JComboBox<>();
                menuBar = new javax.swing.JMenuBar();
                fileMenu = new javax.swing.JMenu();
                openMenuItem = new javax.swing.JMenuItem();
                saveMenuItem = new javax.swing.JMenuItem();
                saveAsMenuItem = new javax.swing.JMenuItem();
                exitMenuItem = new javax.swing.JMenuItem();
                MenuConnect = new javax.swing.JMenu();
                jMenuPorts = new javax.swing.JMenu();
                jMenuItem1 = new javax.swing.JMenuItem();
                MenuItemCheckConnection = new javax.swing.JMenuItem();
                MenuItemRefresh = new javax.swing.JMenuItem();
                MenuItemConnect = new javax.swing.JMenuItem();
                MenuItemCloseConnection = new javax.swing.JMenuItem();
                helpMenu = new javax.swing.JMenu();
                jMenuItemlOG = new javax.swing.JMenuItem();
                contentsMenuItem = new javax.swing.JMenuItem();
                aboutMenuItem = new javax.swing.JMenuItem();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setTitle("Frame Arrestor Tester by KOALIUM lTD");
                setLocation(new java.awt.Point(15, 53));
                setName("frameMain"); // NOI18N

                jPanel1.setBackground(java.awt.SystemColor.inactiveCaption);
                jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, java.awt.Color.gray));

                jLabelStatus.setForeground(new java.awt.Color(51, 0, 51));
                jLabelStatus.setText("not connected yet...");

                jLabelWrite.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
                jLabelWrite.setForeground(new java.awt.Color(51, 0, 51));
                jLabelWrite.setText("copyRights Koalium Ltd.2032");

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelWrite)
                                .addContainerGap())
                );
                jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                                .addComponent(jLabelWrite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                jComboBoxGasType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "IIA1", "IIA", "IIB1", "IIB2", "IIB3", "IIB", "IIC", " " }));
                jComboBoxGasType.setSelectedIndex(1);
                jComboBoxGasType.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jComboBoxGasTypeActionPerformed(evt);
                        }
                });

                jComboBoxFAType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "in-Line", "End-of-line" }));
                jComboBoxFAType.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jComboBoxFATypeActionPerformed(evt);
                        }
                });

                jComboBoxExplodeType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Deflagration", "Detonation" }));
                jComboBoxExplodeType.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jComboBoxExplodeTypeActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jComboBoxGasType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxExplodeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxFAType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(85, Short.MAX_VALUE))
                );
                jPanel2Layout.setVerticalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBoxGasType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBoxFAType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBoxExplodeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(7, Short.MAX_VALUE))
                );

                fileMenu.setMnemonic('f');
                fileMenu.setText("File");

                openMenuItem.setMnemonic('o');
                openMenuItem.setText("Open");
                openMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                openMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(openMenuItem);

                saveMenuItem.setMnemonic('s');
                saveMenuItem.setText("Save");
                saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                saveMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(saveMenuItem);

                saveAsMenuItem.setMnemonic('a');
                saveAsMenuItem.setText("Save As ...");
                saveAsMenuItem.setDisplayedMnemonicIndex(5);
                saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                saveAsMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(saveAsMenuItem);

                exitMenuItem.setMnemonic('x');
                exitMenuItem.setText("Exit");
                exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                exitMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(exitMenuItem);

                menuBar.add(fileMenu);

                MenuConnect.setMnemonic('c');
                MenuConnect.setText("Connection");

                jMenuPorts.setText("Ports");

                jMenuItem1.setText("jMenuItem1");
                jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItem1ActionPerformed(evt);
                        }
                });
                jMenuPorts.add(jMenuItem1);

                MenuConnect.add(jMenuPorts);

                MenuItemCheckConnection.setMnemonic('h');
                MenuItemCheckConnection.setText("Check");
                MenuItemCheckConnection.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                MenuItemCheckConnectionActionPerformed(evt);
                        }
                });
                MenuConnect.add(MenuItemCheckConnection);

                MenuItemRefresh.setMnemonic('r');
                MenuItemRefresh.setText("Refresh");
                MenuItemRefresh.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                MenuItemRefreshActionPerformed(evt);
                        }
                });
                MenuConnect.add(MenuItemRefresh);

                MenuItemConnect.setMnemonic('p');
                MenuItemConnect.setText("Connect");
                MenuItemConnect.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                MenuItemConnectActionPerformed(evt);
                        }
                });
                MenuConnect.add(MenuItemConnect);

                MenuItemCloseConnection.setMnemonic('c');
                MenuItemCloseConnection.setText("Close");
                MenuItemCloseConnection.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                MenuItemCloseConnectionActionPerformed(evt);
                        }
                });
                MenuConnect.add(MenuItemCloseConnection);

                menuBar.add(MenuConnect);

                helpMenu.setMnemonic('h');
                helpMenu.setText("Help");

                jMenuItemlOG.setText("Log");
                jMenuItemlOG.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItemlOGActionPerformed(evt);
                        }
                });
                helpMenu.add(jMenuItemlOG);

                contentsMenuItem.setMnemonic('c');
                contentsMenuItem.setText("Contents");
                helpMenu.add(contentsMenuItem);

                aboutMenuItem.setMnemonic('a');
                aboutMenuItem.setText("About");
                helpMenu.add(aboutMenuItem);

                menuBar.add(helpMenu);

                setJMenuBar(menuBar);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
	    System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

        private void MenuItemCheckConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCheckConnectionActionPerformed
               if(sp==null){
			jLabelStatus.setText("serial port not stablished...");
		}else{
			if(sp.isOpen()){
				if(handshaked){
					jLabelStatus.setText("port is open and handshaked");
				}else{
					jLabelStatus.setText("port is open but not handshaked");
				}
				
			}else{
				jLabelStatus.setText("port not opened yet...");
			}
		}
        }//GEN-LAST:event_MenuItemCheckConnectionActionPerformed

        private void MenuItemRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemRefreshActionPerformed
                // TODO add your handling code here:
               
		initAddPorts();

        }//GEN-LAST:event_MenuItemRefreshActionPerformed

        private void MenuItemConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemConnectActionPerformed
                // TODO add your handling code here:
            

                // TODO add your handling code here:
                // TODO add your handling code here:

        }//GEN-LAST:event_MenuItemConnectActionPerformed

        private void MenuItemCloseConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCloseConnectionActionPerformed
                // TODO add your handling code here:
                // TODO add your handling code here:
                if(sp!=null && sp.isOpen()){
			jLabelStatus.setText("port closed...");
			sp.closePort();
		}

        }//GEN-LAST:event_MenuItemCloseConnectionActionPerformed

        private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_openMenuItemActionPerformed

        private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_saveMenuItemActionPerformed

        private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
                // TODO add your handling code here:FileBrowser
		
        }//GEN-LAST:event_saveAsMenuItemActionPerformed

        private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_jMenuItem1ActionPerformed

        private void jMenuItemlOGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemlOGActionPerformed
                if(log==null){
			log = new Log();
		}
		if(log.isVisible()){
			log.setVisible(false);
			jLabelStatus.setText("close logger..");
		}else{
			log.setVisible(true);
			jLabelStatus.setText("logger opened now...");
		}
        }//GEN-LAST:event_jMenuItemlOGActionPerformed

        private void jComboBoxExplodeTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxExplodeTypeActionPerformed
                // TODO add your handling code here:
		reexplosiontype();
        }//GEN-LAST:event_jComboBoxExplodeTypeActionPerformed

        private void jComboBoxFATypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFATypeActionPerformed
                // TODO add your handling code here:
		reexplosiontype();
        }//GEN-LAST:event_jComboBoxFATypeActionPerformed

        private void jComboBoxGasTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxGasTypeActionPerformed
                // TODO add your handling code here:
		reexplosiontype();
        }//GEN-LAST:event_jComboBoxGasTypeActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Metal".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>
		
		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new FormMain().setVisible(true);
			}
		});
	}

	public void initAddPorts(){
		
		jMenuPorts.removeAll();
		
		SerialPort[] AvailablePorts = SerialPort.getCommPorts();
		for (SerialPort AvailablePort : AvailablePorts) {
			javax.swing.JMenuItem jMenuItem = new javax.swing.JMenuItem();
			jMenuItem.setText(AvailablePort.getSystemPortName());
			jMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
				sp = SerialPort.getCommPort(jMenuItem.getText());
				sp.openPort(20);
				sp.setComPortParameters(BaudRate, DataBits, StopBits, Parity);
				sp.setComPortTimeouts(SerialPort.TIMEOUT_NONBLOCKING, 0, 0);
				jLabelStatus.setText("MODE_CONNECT ,serialReciver ");
				this.rmode =MODE_CONNECT;
				if(ffctrl==null){
					ffctrl = new FormFire();
					ffctrl.setVisible(true);
				}
				if(ftmix==null){
					ftmix = new FormMixture();
					ftmix.setVisible(true);
				}
				
			 
			 
			 
				 if(log==null){
					 log=new Log();
					 log.setVisible(handshaked);
				}
				 if(git==null){
					 git=new GraphIt();
				 }
				 if(fb==null){
				 fb = new FileBrowse();
				 //fb.setVisible(true);
				 }
			 
				 reexplosiontype();
				 timi();
				
			});
			jMenuPorts.add(jMenuItem);
	
		}
	}
	
	//
	//
	//


	//
	private synchronized TimerTask tt(){
		
		TimerTask timerTask =  new TimerTask() {
			@Override
			public void run() {
				
				
				
				if(rmode ==MODE_CONNECT){
					//rmode = MODE_IDLE;
					serialReciver();
					
					
					jLabelStatus.setText("MODE_CONNECT ,serialReciver ");
				}
				if(rmode ==MODE_FIRE ){
					jLabelStatus.setText("MODE_FIRE ,readfiringdata ");
					readfiringdata();
				}else{
					monitoring();
				}
				if(rmode ==MODE_SAVE_RAW ){
					jLabelStatus.setText("MODE_SAVE ,readfiringdata ");
					
				}
				if(rmode ==MODE_ANALYS_RAW ){
					jLabelStatus.setText("MODE_ANALYS_RAW ,analysrawdata ");
					analysrawdata() ;
					
				}
				if(rmode ==MODE_JOB_DONE ){
					jLabelStatus.setText("MODE_JOB_DONE ,analysrawdata ");
					rmode =MODE_CONNECT;
				}
				monitoring();
				

			}
		};
		return timerTask;
	}

	//
	private  synchronized void timi(){
		timer = new Timer("main");
		timer.scheduleAtFixedRate(tt(), 3, 2);
	}
	//
	public synchronized void serialReciver(){
		
		if(sp==null){
			return;	
		}
		//
		if(sp.bytesAvailable()>0){
			byte[] spb = new byte[sp.bytesAvailable()];
			sp.readBytes(spb, spb.length);
			//
			byte[] rb = new byte[spb.length];
			for(int i=0;i<spb.length;i++){
				rb[i]=spb[i];
				recbyte[recbytecount++]=spb[i];
				if(recbytecount>=recbyte.length){
					recbytecount=0;
				}
				if(rb[i]==_eoc){
					
					commandpharser(rb);
					if(log!=null){
						log.addlogger("RECIVE : "+Arrays.toString(rb), true);
					}
					
				}else{
					
				}
				
			}
			
		}
		
	}
	
	//
	int mybufferindex = 0;
	byte[] mybuffer = new byte[225000];
	private synchronized void readfiringdata() {
		
		if(sp.bytesAvailable()>0){
			byte[] b = new byte[sp.bytesAvailable()];
			sp.readBytes(b, b.length);
			System.arraycopy(b, 0, mybuffer, mybufferindex, b.length);
			mybufferindex+=b.length;
			bybu.put(b);
			recfiredatalen=recfiredatalen+b.length;
		}
		
		
		
		
		if(System.currentTimeMillis()>starttimefireplus){
			rmode = MODE_SAVE_RAW;
			OutputStream tos;	
			
			try {
				tos = new FileOutputStream("rawdata.dat");
				tos.write(mybuffer, 0, mybufferindex);
				tos.close();
				
			} catch (FileNotFoundException ex) {
				Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
			} catch (IOException ex) {
				Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
			}
			
			rmode = MODE_ANALYS_RAW;
			
			
		}
	}
	//
	private synchronized void analysrawdata() {
		rmode = MODE_SAVE_ANALYS;
		
		//byte[] b = bybu.slice(0, recfiredatalen).array();
		//bybu.slice(0, recfiredatalen).array();
		boolean bihbih = false;
		boolean migmig = false;
		int kim=0;
		OutputStream fsp;
		OutputStream fspt;
		OutputStream fst ;
		try {
			fsp = new FileOutputStream("pressuredata.dat");
			 fspt= new FileOutputStream("pressuredata.txt");
			 fst = new FileOutputStream("timedata.txt");
		
		for(int i = 0;i < mybufferindex;i++){
			if(bihbih==false){
			if(mybuffer[i]=='b' &&mybuffer[i+1]=='i' &&mybuffer[i+2]=='h' &&mybuffer[i+3]=='b' &&mybuffer[i+4]=='i' &&mybuffer[i+5]=='h' ){
				if(bihbih==false){
					bihbih=true;
					i=i+6;
					continue;
				}else{
					
				}
				
			}
			}else{
				if(migmig==false){
					
					if(mybuffer[i+kim+0]=='m' &&mybuffer[i+kim+1]=='i' &&mybuffer[i+kim+2]=='g' &&mybuffer[i+kim+3]=='m' &&mybuffer[i+kim+4]=='i' &&mybuffer[i+kim+5]=='g' ){
						if(migmig==false){
							migmig=true;
							continue;
						}
					}
				}
			}
			
			
			if(bihbih&&!migmig){
				fsp.write(mybuffer[i]);
				int bi = mybuffer[i];
				if(bi<0){
					bi+=256;
				}
				String sss = Integer.toString(bi)+"\n";
				fspt.write(sss.getBytes());
			}else
			if(bihbih){
				fst.write(mybuffer[i]);
			}
		}
		//fst.write(b, fin, recfiredatalen-1);
		
		
		
		fsp.close();
		
		
		fst.close();
		
		
		fspt.close();
		} catch (FileNotFoundException ex) {
			Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
		}
		
		rmode = MODE_JOB_DONE;
		ffctrl.setcmode(MODE_IDLE);
		
	}
	//
	//
	//
	//
	
	//
	private void fireinthehole(){
		this.rmode = MODE_FIRE;
		this.mybufferindex=0;
		bybu.clear();
		bybu.rewind();
		recfiredatalen=0;
		starttimefireplus = System.currentTimeMillis()+12000;
		serialSend(makecmd(_fire,(byte)'8'),_fire);
		
		
	}

	private void commandpharser(final byte[] reccmd){
		int ival;
		switch(reccmd[0]){
			case _tanktemp:
				
				rtemp =readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;	
				ftmix.setmtemp(rtemp);
				break;
			//
			case _tankpressure:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;//cmdRun(rsf3c,ival);
				rpressure=ival;
				ftmix.setmpressure(ival);
				break;
			//
			case _handshake:
				if(handshaked==false){
					handshaked = true;
					serialSend(null,_handshake);
					jLabelStatus.setText("handshaked");
				}
				
				break;
			//
			case _gaspressure:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				ftmix.setmflampress(ival);
				break;
			//
			case _mq6:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				ftmix.setmflam(ival);
				break;
			//
			case _oxytemp:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				ftmix.setmoxy(ival);
				ftmix.setmoxytem(ival);
				break;
			//
			case _ir0:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				break;
			//
			case _ir1:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				break;
			//
			case _ir2:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				break;
			//
			case _ir3:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				break;
			//
			
				
			case _tankgas:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				ftmix.setmflam(ival);
				break;
			//
			case _piezo:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				break;
			//
			case _baudrate:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				break;
			//
			case _tankvalve:
				ival = readbyteasint(reccmd[1])+readbyteasint(reccmd[2])*256;
				break;
			//
			
		}
		recbytecount=0;
		recbyte=new byte[10];
		
	}
	
	//
	//
	//

	
	
	
	private boolean serialSend(byte[] b,byte bb) {
		//return value for whether opening the streams is successful or not
		if(b==null||b.length==0){
			b = new byte[1];
			b[0]=bb;
		}
		byte[] sb=new byte[b.length+1];
		
		System.arraycopy(b, 0, sb, 0, b.length);
		sb[sb.length-1]=(byte)_eoc;
		if (sp!=null&&sp.isOpen()) {
			sp.writeBytes(sb,sb.length);
			log.addlogger("SEND : "+Arrays.toString(sb), true);
			return true;
		}
		return false;
		
	}
		
	
	
	
	//
	private void monitoring(){
		if(!handshaked){
			return;
		}
		if(ftmix==null){
			 
			 
		}else{
			fb.getAddres();
			reexplosiontype();
			mixTankHandler();
			controlHandler();
			
			
		}
	
	}
	
	private void mixTankHandler(){
		rcom = ftmix.getccom();
			if(ftmix.getccom() == FormMixture.COMMAND_MIX){
				ftmix.setccom(0);
				roxyread = ftmix.getmoxyread();
				serialSend(makecmd(_addoxygen,roxyread),(byte)0);
				//
				rairread = ftmix.getmairread();
				serialSend(makecmd(_addair,rairread),(byte)0);
				//
				rflamread = ftmix.getmflamread();
				serialSend(makecmd(_addGas,rflamread),(byte)0);
				//
				serialSend(makecmd(_mix,1000),(byte)0);
				
			}
			flammablegas();
			ftmix.setmairtem(rairtem);
			ftmix.setmflam(rflam);
			ftmix.setmflampress(rflampress);
			ftmix.setmflamtype(rflamtype);
			ftmix.setmmode(rmode);
			ftmix.setmoxy(roxy);
			ftmix.setmoxypress(roxypress);
			ftmix.setmoxytem(roxytem);
			ftmix.setmpressure(rpressure);
			ftmix.setmtemp(rtemp);
			
			/*rairread = ftmix.getmairread();
			
			rflamread=ftmix.getmflamread();
			roxyread=ftmix.getmoxyread();
			rflamtype=ftmix.getmflamtype();
*/
			//
			//
	}
	private void controlHandler(){
		if(ffctrl==null){
			return;
		}
		if(ffctrl.getcommand()==FormFire.COMMAND_STOP){
			serialSend(makecmd(_stop,500),(byte)50);
			ffctrl.setcommand(0);
		}else
		if(ffctrl.getcommand()==FormFire.COMMAND_FIRE){
			fireinthehole();
			if(rmode==MODE_CONNECT){
				fireinthehole();
			}else{
				
			}
			ffctrl.setcommand(0);
		}
		
		
		
		
		
	}
	
	
	public final void flammablegas(){
		if(flamgas != jComboBoxGasType.getSelectedIndex()){
		flamgas = jComboBoxGasType.getSelectedIndex();
		switch(flamgas){
			case 0:
				fgasname = FLAM_GAS[0];
				break;
			//
			case 1:
				fgasname = FLAM_GAS[2];
				break;
			case 2:
			case 3:
			case 4:
			case 5:
				fgasname = FLAM_GAS[3];
				break;
			//
			case 6:
				fgasname = FLAM_GAS[4];
				break;
				
			//
				
		}
		
		}
		
	}
	
	private void reexplosiontype(){
		ftmix.setmixgas(fgasname);
		ftmix.setmflamtypechange(flamgas+1);
		ffctrl.setgasmixturesign(jComboBoxGasType.getSelectedIndex());
		ffctrl.setexplosiontype(jComboBoxExplodeType.getSelectedIndex());
		ffctrl.setfatype(jComboBoxFAType.getSelectedIndex());
		ffctrl.setTitle(jComboBoxExplodeType.getSelectedItem().toString()+" "+jComboBoxFAType.getSelectedItem().toString());
		ftmix.setTitle(jComboBoxExplodeType.getSelectedItem().toString()+" "+jComboBoxFAType.getSelectedItem().toString());
		log.setTitle(jComboBoxExplodeType.getSelectedItem().toString()+" "+jComboBoxFAType.getSelectedItem().toString());
		
	}
	//
	private int readbyteasint(byte b){
		int i = b;
		if(i<0){
			i=i+256;
		}
		return i;
	}
	
	private byte[] makecmd(byte c,int v){
		byte[] b = new byte[3];
		b[0]=(byte)c;
		
		b[1]= (byte)((v)&0xff);
		b[2] = (byte)((v>>8)&0xff);
		return b;
	}
	int recbytecount = 0;
	byte[] recbyte = new byte[100];
	FileBrowse fb ;
		
	GraphIt git = null;
	//
	String ss="";
	FormFire ffctrl=null;
	FormMixture ftmix = null;
	Log log = null;
	
	public int flamgas = 0;
	public String fgasname ="";
	private long starttimefireplus =0;
	
	private Vector comtosend;
	ByteBuffer bybu;
	Timer timer;
	private int recfiredatalen=0;
	public int BaudRate = 2000000;
	public int DataBits = 8;
	public int StopBits = SerialPort.ONE_STOP_BIT;
	public int Parity = SerialPort.NO_PARITY;
	public SerialPort sp;
	public int selectedportindex = 0;
	
	public boolean  handshaked = false;
	//
	final private String PASS = "8";
	//
	final byte _eoc =(byte)0;
	final byte _eol =(byte) 255;
	final byte _addair =(byte) 'A';
	final byte _addoxygen =(byte) 'B';
        final byte _addGas =(byte) 'C';
        final byte _alarm =(byte) 'D';
        final byte _mix =(byte) 'E';
        final byte _fire =(byte) 'F';
        final byte _tankgas =(byte) 'G';
        final byte _tankpressure =(byte) 'H';
        final byte _tanktemp =(byte) 'I';
        final byte _gaspressure =(byte) 'J';
        final byte _airpressure =(byte)'K';
        final byte _tankvalve =(byte)'L';
        final byte _mq6 =(byte)'M';
        final byte _close =(byte)'N';
        final byte _open=(byte)'O';
        final byte _piezo =(byte)'P';
        final byte _oxypressure =(byte)'Q';
        final byte _read =(byte)'R';
        final byte _oxytemp=(byte)'S';
        final byte _test=(byte)'T';
        final byte _gastemp=(byte)'U';
        final byte _airtemp=(byte)'V';
        final byte _write=(byte)'W';
        final byte _pass=(byte)'X';
        final byte _baudrate=(byte)'Y';
        final byte _handshake=(byte)'Z';
        final byte _ir0 =(byte) 'a';
        final byte _ir1 =(byte) 'b';
        final byte _ir2 =(byte) 'c';
        final byte _ir3 =(byte) 'd';
        final byte _ir4 =(byte) 'c';
        final byte _ir5 =(byte) 'd';
	final byte _stop ='s';


	//
	private int rpressure=0;
	private int rtemp=0;
	private int rflam=0;
	private int rmode=0;
	private int roxy=0;
	private int roxytem=0;
	private int roxypress=0;
	private int rflamtem=0;
	private int rflampress=0;
	private int rairtem=0;
	private int rairpress=0;
	private int roxyread=0;
	private int rairread=0;
	private int rflamread=0;
	private int rflamtype=0;
	private int rcom=0;
	
	
	
	private final int sysmode = 0;

	
	public static final int COMMAND_FIRE = 1010;
	public static final int COMMAND_STOP = 1020;
	public static final int COMMAND_MIX = 1030;
	public static final int COMMAND_ADD = 1040;
	public static final int FIRING = 1110;
	public static final int IDLE = 1120;
	public static final int MODE_IDLE = 1210;
	public static final int MODE_CONNECT = 3;
	public static final int MODE_FIRE = 5;
	public static final int MODE_FIRING = 7;
	public static final int MODE_ALARM = 11;
	public static final int MODE_PREFIRE = 13;
	public static final int MODE_CMD = 19;
	public static final int MODE_TERMINAL = 23;
	public static final int MODE_READ_FIRE = 29;
	public static final int MODE_SAVE_RAW = 31;
	public static final int MODE_SAVING_RAW = 37;
	public static final int MODE_ANALYS_RAW = 41;
	public static final int MODE_ANALYSING_RAW = 43;
	public static final int MODE_SAVE_ANALYS = 47;
	public static final int MODE_SAVING_ANALYS = 53;
	public static final int MODE_GRAPH = 59;
	public static final int MODE_START_JOB = 61;
	public static final int MODE_JOB_DONE = 67;
	public static final int MODE_MONITORING = 71;
	public static final int FLAM_MTHANE = 20102;
	public static final int FLAM_PROPANE = 20102;
	public static final int FLAM_BUTANE = 20102;
	public static final int FLAM_ETHYLENE = 20102;
	public static final int FLAM_HYDROGEN = 20102;
	public static final int DEFLAGRATION = 0;
	public static final int DETONATION = 1;
	public static final String[] FLAM_GAS = {"methane","Hexane","propane","ethylene","Hydrogen"};
	public static final String[] EXPLOTION_TYPE_NAME= {"Deflagration","Detonation","Burning"};
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JMenu MenuConnect;
        private javax.swing.JMenuItem MenuItemCheckConnection;
        private javax.swing.JMenuItem MenuItemCloseConnection;
        private javax.swing.JMenuItem MenuItemConnect;
        private javax.swing.JMenuItem MenuItemRefresh;
        private javax.swing.JMenuItem aboutMenuItem;
        private javax.swing.JMenuItem contentsMenuItem;
        private javax.swing.JMenuItem exitMenuItem;
        private javax.swing.JMenu fileMenu;
        private javax.swing.JMenu helpMenu;
        private javax.swing.JComboBox<String> jComboBoxExplodeType;
        private javax.swing.JComboBox<String> jComboBoxFAType;
        private javax.swing.JComboBox<String> jComboBoxGasType;
        private javax.swing.JLabel jLabelStatus;
        private javax.swing.JLabel jLabelWrite;
        private javax.swing.JMenuItem jMenuItem1;
        private javax.swing.JMenuItem jMenuItemlOG;
        private javax.swing.JMenu jMenuPorts;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel2;
        private javax.swing.JMenuBar menuBar;
        private javax.swing.JMenuItem openMenuItem;
        private javax.swing.JMenuItem saveAsMenuItem;
        private javax.swing.JMenuItem saveMenuItem;
        // End of variables declaration//GEN-END:variables

}
