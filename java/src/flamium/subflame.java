/*
 * The MIT License
 *
 * Copyright 2024 koalium.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package flamium;

import com.fazecast.jSerialComm.SerialPort;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.Buffer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author koalium
 */
public class subflame extends javax.swing.JFrame {

	private static final long serialVersionUID = -1790522765958159006L;

	/**
	 * Creates new form subflame
	 */
	public subflame() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jPanel1 = new javax.swing.JPanel();
                jButtonRefreshSerialListFileTab = new javax.swing.JButton();
                jComboBoxComPortSelectionFileTab = new javax.swing.JComboBox<>();
                jButtonConnectSerialFileTab = new javax.swing.JButton();
                jButtonFireInTheHole = new javax.swing.JButton();
                jButtonTestIrSensorsFileTab = new javax.swing.JButton();
                jButtonTestDataFileTab = new javax.swing.JButton();
                jPasswordFieldFireTabFile = new javax.swing.JPasswordField();
                jSeparator5 = new javax.swing.JSeparator();
                jLabelConnectionFileTab = new javax.swing.JLabel();
                jButtonCloseConnectionFileTab = new javax.swing.JButton();
                jLabel1 = new javax.swing.JLabel();
                jButtonTestPiezoTabFile = new javax.swing.JButton();
                jSeparator3 = new javax.swing.JSeparator();
                jSeparator4 = new javax.swing.JSeparator();
                jScrollPane2 = new javax.swing.JScrollPane();
                jTextAreaMonitoringFileTab = new javax.swing.JTextArea();
                jButtonCalibreFileTab = new javax.swing.JButton();
                jLabelShowTerminal = new javax.swing.JLabel();
                jFormattedTextField1 = new javax.swing.JFormattedTextField();
                jProgressBar1 = new javax.swing.JProgressBar();
                menuBar = new javax.swing.JMenuBar();
                fileMenu = new javax.swing.JMenu();
                openMenuItem = new javax.swing.JMenuItem();
                saveMenuItem = new javax.swing.JMenuItem();
                saveAsMenuItem = new javax.swing.JMenuItem();
                exitMenuItem = new javax.swing.JMenuItem();
                editMenu = new javax.swing.JMenu();
                cutMenuItem = new javax.swing.JMenuItem();
                copyMenuItem = new javax.swing.JMenuItem();
                pasteMenuItem = new javax.swing.JMenuItem();
                deleteMenuItem = new javax.swing.JMenuItem();
                helpMenu = new javax.swing.JMenu();
                contentsMenuItem = new javax.swing.JMenuItem();
                aboutMenuItem = new javax.swing.JMenuItem();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                jButtonRefreshSerialListFileTab.setText("refresh");
                jButtonRefreshSerialListFileTab.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonRefreshSerialListFileTabActionPerformed(evt);
                        }
                });

                jComboBoxComPortSelectionFileTab.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COM" }));
                jComboBoxComPortSelectionFileTab.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jComboBoxComPortSelectionFileTabActionPerformed(evt);
                        }
                });

                jButtonConnectSerialFileTab.setText("Connect");
                jButtonConnectSerialFileTab.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonConnectSerialFileTabActionPerformed(evt);
                        }
                });

                jButtonFireInTheHole.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
                jButtonFireInTheHole.setForeground(new java.awt.Color(0, 51, 51));
                jButtonFireInTheHole.setText("Fire");
                jButtonFireInTheHole.setEnabled(false);
                jButtonFireInTheHole.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonFireInTheHoleActionPerformed(evt);
                        }
                });

                jButtonTestIrSensorsFileTab.setText("Test IR");
                jButtonTestIrSensorsFileTab.setEnabled(false);
                jButtonTestIrSensorsFileTab.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonTestIrSensorsFileTabActionPerformed(evt);
                        }
                });

                jButtonTestDataFileTab.setText("test Data");
                jButtonTestDataFileTab.setEnabled(false);
                jButtonTestDataFileTab.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonTestDataFileTabActionPerformed(evt);
                        }
                });

                jPasswordFieldFireTabFile.setText("0");

                jLabelConnectionFileTab.setText("push refresh");
                jLabelConnectionFileTab.setAlignmentX(0.5F);
                jLabelConnectionFileTab.setBorder(javax.swing.BorderFactory.createEtchedBorder());

                jButtonCloseConnectionFileTab.setText("Close");
                jButtonCloseConnectionFileTab.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonCloseConnectionFileTabActionPerformed(evt);
                        }
                });

                jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
                jLabel1.setText("Monitoring:");
                jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

                jButtonTestPiezoTabFile.setText("Test Piezo");
                jButtonTestPiezoTabFile.setEnabled(false);
                jButtonTestPiezoTabFile.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonTestPiezoTabFileActionPerformed(evt);
                        }
                });

                jTextAreaMonitoringFileTab.setColumns(20);
                jTextAreaMonitoringFileTab.setRows(5);
                jTextAreaMonitoringFileTab.setTabSize(4);
                jScrollPane2.setViewportView(jTextAreaMonitoringFileTab);

                jButtonCalibreFileTab.setText("Calibre");
                jButtonCalibreFileTab.setEnabled(false);
                jButtonCalibreFileTab.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonCalibreFileTabActionPerformed(evt);
                        }
                });

                jLabelShowTerminal.setText("  ");
                jLabelShowTerminal.setBorder(javax.swing.BorderFactory.createEtchedBorder());

                jFormattedTextField1.setColumns(11);
                jFormattedTextField1.setText(" ");

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jSeparator3)
                                        .addComponent(jSeparator4)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jLabelShowTerminal, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jButtonRefreshSerialListFileTab)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jComboBoxComPortSelectionFileTab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jButtonConnectSerialFileTab)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jButtonCloseConnectionFileTab)))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jButtonFireInTheHole)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jPasswordFieldFireTabFile, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jLabelConnectionFileTab, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jButtonTestPiezoTabFile)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jButtonTestDataFileTab)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jButtonTestIrSensorsFileTab)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jButtonCalibreFileTab)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jFormattedTextField1))
                                                        .addComponent(jSeparator5))
                                                .addGap(17, 17, 17))))
                );
                jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonRefreshSerialListFileTab)
                                        .addComponent(jComboBoxComPortSelectionFileTab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonConnectSerialFileTab)
                                        .addComponent(jButtonCloseConnectionFileTab))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jButtonCalibreFileTab)
                                                .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jButtonTestPiezoTabFile)
                                                .addComponent(jButtonTestDataFileTab)
                                                .addComponent(jButtonTestIrSensorsFileTab)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonFireInTheHole)
                                        .addComponent(jPasswordFieldFireTabFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabelConnectionFileTab))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabelShowTerminal))
                                .addGap(21, 21, 21)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(110, Short.MAX_VALUE))
                );

                fileMenu.setMnemonic('f');
                fileMenu.setText("File");

                openMenuItem.setMnemonic('o');
                openMenuItem.setText("Open");
                fileMenu.add(openMenuItem);

                saveMenuItem.setMnemonic('s');
                saveMenuItem.setText("Save");
                fileMenu.add(saveMenuItem);

                saveAsMenuItem.setMnemonic('a');
                saveAsMenuItem.setText("Save As ...");
                saveAsMenuItem.setDisplayedMnemonicIndex(5);
                fileMenu.add(saveAsMenuItem);

                exitMenuItem.setMnemonic('x');
                exitMenuItem.setText("Exit");
                exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                exitMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(exitMenuItem);

                menuBar.add(fileMenu);

                editMenu.setMnemonic('e');
                editMenu.setText("Edit");

                cutMenuItem.setMnemonic('t');
                cutMenuItem.setText("Cut");
                editMenu.add(cutMenuItem);

                copyMenuItem.setMnemonic('y');
                copyMenuItem.setText("Copy");
                editMenu.add(copyMenuItem);

                pasteMenuItem.setMnemonic('p');
                pasteMenuItem.setText("Paste");
                editMenu.add(pasteMenuItem);

                deleteMenuItem.setMnemonic('d');
                deleteMenuItem.setText("Delete");
                editMenu.add(deleteMenuItem);

                menuBar.add(editMenu);

                helpMenu.setMnemonic('h');
                helpMenu.setText("Help");

                contentsMenuItem.setMnemonic('c');
                contentsMenuItem.setText("Contents");
                helpMenu.add(contentsMenuItem);

                aboutMenuItem.setMnemonic('a');
                aboutMenuItem.setText("About");
                helpMenu.add(aboutMenuItem);

                menuBar.add(helpMenu);

                setJMenuBar(menuBar);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
	    System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

        private void jButtonCalibreFileTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalibreFileTabActionPerformed

        }//GEN-LAST:event_jButtonCalibreFileTabActionPerformed

        private void jButtonTestPiezoTabFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestPiezoTabFileActionPerformed
                // TODO add your handling code here:

                jLabelConnectionFileTab.setText("reading piezo value...");

                int i = -1;
                try {
                        //
                        Thread.sleep(1000);
                } catch (InterruptedException e) {
                }
                try {
                        i = readpiezovalue();
                } catch (IOException ex) {
                        Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(i>0){
                        jLabelConnectionFileTab.setText("piezo value readed successfully.");
                }
        }//GEN-LAST:event_jButtonTestPiezoTabFileActionPerformed

        private void jButtonCloseConnectionFileTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseConnectionFileTabActionPerformed
                // TODO add your handling code here:
                if (sp.isOpen()) {
                        sp.closePort();
                        jLabelConnectionFileTab.setText(sp.toString() + "  ...CLOSE IT...");
                } else {
                        jLabelConnectionFileTab.setText(sp.toString() + "  ...not opened yet..");
                }
        }//GEN-LAST:event_jButtonCloseConnectionFileTabActionPerformed

        private void jButtonTestDataFileTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestDataFileTabActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_jButtonTestDataFileTabActionPerformed

        private void jButtonTestIrSensorsFileTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestIrSensorsFileTabActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_jButtonTestIrSensorsFileTabActionPerformed

        private void jButtonFireInTheHoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFireInTheHoleActionPerformed
                if (String.valueOf(jPasswordFieldFireTabFile.getPassword()) == null ? default_fire_password != null : !String.valueOf(jPasswordFieldFireTabFile.getPassword()).equals(default_fire_password)) {
                        jLabelConnectionFileTab.setText("password incorrect!!!...");
                        return;
                }
                jLabelConnectionFileTab.setText("fire in the hole..!!");
                try {
                        //
                        Thread.sleep(00);
                } catch (InterruptedException e) {
                }
                fireIntheHole();
        }//GEN-LAST:event_jButtonFireInTheHoleActionPerformed

        private void jButtonConnectSerialFileTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectSerialFileTabActionPerformed
                // TODO add your handling code here:
                jLabelConnectionFileTab.setText("Connecting...");

                if (sp == AvailablePorts[jComboBoxComPortSelectionFileTab.getSelectedIndex()] && sp.isOpen()) {
                        jLabelConnectionFileTab.setText(sp.toString() + "...Connected");
                        return;
                }
                sp = AvailablePorts[jComboBoxComPortSelectionFileTab.getSelectedIndex()];
                sp.openPort(1000);
                sp.setComPortParameters((int) BaudRate, DataBits, StopBits, Parity); // default connection settings for Arduino
                sp.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 10000, 100); // block until bytes can be written

                //tm.setDelay(500);
                if (sp.isOpen()) {
                        jButtonFireInTheHole.setEnabled(true);
                        jButtonTestDataFileTab.setEnabled(true);
                        jButtonTestIrSensorsFileTab.setEnabled(true);
                        jButtonTestPiezoTabFile.setEnabled(true);
                        jButtonCalibreFileTab.setEnabled(true);
                }
                if (sp.openPort()) {
                        jLabelConnectionFileTab.setText("Port is open :)");
                        jButtonFireInTheHole.setEnabled(true);
                } else {
                        jLabelConnectionFileTab.setText("Failed to open port :(");
                }
                try {
                        // ایجاد تاخیر 2 ثانیه‌ای
                        Thread.sleep(1500);
                } catch (InterruptedException e) {
                }
        }//GEN-LAST:event_jButtonConnectSerialFileTabActionPerformed

        private void jComboBoxComPortSelectionFileTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxComPortSelectionFileTabActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_jComboBoxComPortSelectionFileTabActionPerformed

        private void jButtonRefreshSerialListFileTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshSerialListFileTabActionPerformed
                // TODO add your handling code here:
                jComboBoxComPortSelectionFileTab.removeAllItems();
                AvailablePorts = SerialPort.getCommPorts();
                for (SerialPort AvailablePort : AvailablePorts) {
                        jComboBoxComPortSelectionFileTab.addItem(AvailablePort.getSystemPortName());
                }
                
                jLabelConnectionFileTab.setText("Port Refreshed");
        }//GEN-LAST:event_jButtonRefreshSerialListFileTabActionPerformed

	

	//
	public void fireIntheHole() {
		byte[] bufferb = {'f', 'i', 'r', 'e', '8', 0, '\n'};
		int bufferbindexreader = 0;
		int[] serbuffbyte = new int[500000];
		long st = System.currentTimeMillis();
		Boolean checkpoint_0 = false;
		Boolean checkpoint_1 = false;
		sp.setComPortTimeouts(SerialPort.TIMEOUT_NONBLOCKING, 2000, 2000);
		// Writing to binary file
		sp.writeBytes(bufferb, bufferb.length);
		try {
			OutputStream Stream;
			OutputStream datastream;
			OutputStream datastringstream;
			OutputStream timestream;
			try (InputStream inputStream = sp.getInputStream()) {
				Stream = new FileOutputStream("log.bin");
				datastream = new FileOutputStream("log_pressure.bin");
				datastringstream = new FileOutputStream("log_pressure.txt");
				timestream = new FileOutputStream("log_ir.txt");
				while (System.currentTimeMillis() - st < 8800) {
					if (sp.bytesAvailable() > 0) {
						serbuffbyte[bufferbindexreader++] = inputStream.read();

					}

				}
				int i = 0;
				while (i < bufferbindexreader) {
					Stream.write(serbuffbyte[i]);
					if (i++ < 5) {
						continue;
					}
					if (checkpoint_0 == false) {
						if ((serbuffbyte[i] == 0) && (serbuffbyte[i - 1] == 127) && (serbuffbyte[i - 2] == 0) && (serbuffbyte[i - 3] == 127) && (serbuffbyte[i - 4] == 0)) {
							checkpoint_0 = true;

						}
					} else if (checkpoint_1 == false) {

						if ((serbuffbyte[i] == 0) && (serbuffbyte[i + 1] == 127) && (serbuffbyte[i + 2] == 0) && (serbuffbyte[i + 3] == 127) && (serbuffbyte[i + 4] == 0)) {
							checkpoint_1 = true;
						}
					} else {

					}
					if (checkpoint_0 && !checkpoint_1) {
						datastream.write(serbuffbyte[i + 1]);
						datastringstream.write(byteParser(serbuffbyte[i + 1]));
					}
					if (checkpoint_1) {
						timestream.write(serbuffbyte[i + 5]);
					}

				}

			}
			datastringstream.close();
			timestream.close();
			Stream.close();
			datastream.close();
			sp.closePort();
			// Stream.write(new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F}); 

			// ASCII values for "Hello"
			// Reading from a binary file
		} catch (IOException e) {
		}
	}
	//open the input and output streams
	//pre style="font-size: 11px;": an open port
	//post: initialized input and output streams for use to communicate data

	public boolean serialSend(String ss) {
		//return value for whether opening the streams is successful or not
		if (sp.isOpen()) {
			sp.writeBytes(ss.getBytes(), ss.getBytes().length);
			return true;
		}

		return false;
	}

	public int readpiezovalue() throws FileNotFoundException, IOException {
		if (!sp.isOpen()) {

			sp.openPort(2500);
			if (!sp.isOpen()) {
				return 0;
			}
		}

		serialSend(_str_piezotest_);
		int[] ii = terminalReadAscci(sp);
		int c = 0;
		for(c=0;c<ii.length;c++){
			if(ii[c]=='\n'){
				break;
			}
		}
		int calvalue = ii[c]+ii[c+1];
		jLabelShowTerminal.setText(gstr.substring(0, 4) + " " + calvalue);
		OutputStream Stream = new FileOutputStream("calibre.bin");
		Stream.write(calvalue);
		
		return calvalue;
	}

	public int[] terminalReadAscci(SerialPort sp_) {
		int[] ii = new int[255];
		if (!sp_.isOpen()) {
			return ii;
		}
		char inchar;

		int iicounter = 0;

		sp_.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 1000, 1000);
		try (InputStream inputStream = sp.getInputStream()) {
			while (sp.bytesAvailable() > 0) {//&&System.currentTimeMillis()<st+1000 ){
				inchar = (char) inputStream.read();
				ii[iicounter++] = (int) (inchar);
				gstr += inchar;
			}

		} catch (IOException e) {
		}
		return ii;
	}

	//
	public void writeToFile(int[] data, int size, String filename) throws FileNotFoundException {
		OutputStream Stream;
		Stream = new FileOutputStream(filename);
		int i = 0;
		while (i < size) {
			try {
				Stream.write(data[i]);
				Stream.close();
			} catch (IOException ex) {
				Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
			}
		}

	}

	byte[] byteParser(int b) {
		String s = String.valueOf(b);
		return (s + "\n").getBytes();
	}
	public void showonconnectiontext(String st){
		jLabelConnectionFileTab.setText(st);
	}
	//
	
	
	static public long BaudRate = 2000000;
	static public int DataBits = 8;
	static public int StopBits = SerialPort.ONE_STOP_BIT;
	static public int Parity = SerialPort.NO_PARITY;
	//static public String comportstr = "COM";
	//static public String serialPortNameList[] = {"COM0","COM1"};
	static public SerialPort sp;
	final public String _str_calibre = "clbr\n";
	final public String _str_irtest_ ="tstir\n";
	final public String _str_piezotest_ ="tstpzo";
	private String gstr = "";
	private Buffer gbuffer;
	static public SerialPort[] AvailablePorts;
	private final String default_fire_password = "8";
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JMenuItem aboutMenuItem;
        private javax.swing.JMenuItem contentsMenuItem;
        private javax.swing.JMenuItem copyMenuItem;
        private javax.swing.JMenuItem cutMenuItem;
        private javax.swing.JMenuItem deleteMenuItem;
        private javax.swing.JMenu editMenu;
        private javax.swing.JMenuItem exitMenuItem;
        private javax.swing.JMenu fileMenu;
        private javax.swing.JMenu helpMenu;
        private javax.swing.JButton jButtonCalibreFileTab;
        private javax.swing.JButton jButtonCloseConnectionFileTab;
        private javax.swing.JButton jButtonConnectSerialFileTab;
        private javax.swing.JButton jButtonFireInTheHole;
        private javax.swing.JButton jButtonRefreshSerialListFileTab;
        private javax.swing.JButton jButtonTestDataFileTab;
        private javax.swing.JButton jButtonTestIrSensorsFileTab;
        private javax.swing.JButton jButtonTestPiezoTabFile;
        private javax.swing.JComboBox<String> jComboBoxComPortSelectionFileTab;
        private javax.swing.JFormattedTextField jFormattedTextField1;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabelConnectionFileTab;
        private javax.swing.JLabel jLabelShowTerminal;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPasswordField jPasswordFieldFireTabFile;
        private javax.swing.JProgressBar jProgressBar1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JSeparator jSeparator3;
        private javax.swing.JSeparator jSeparator4;
        private javax.swing.JSeparator jSeparator5;
        private javax.swing.JTextArea jTextAreaMonitoringFileTab;
        private javax.swing.JMenuBar menuBar;
        private javax.swing.JMenuItem openMenuItem;
        private javax.swing.JMenuItem pasteMenuItem;
        private javax.swing.JMenuItem saveAsMenuItem;
        private javax.swing.JMenuItem saveMenuItem;
        // End of variables declaration//GEN-END:variables

}
